{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["localeList","Object","keys","locales","ascOrEq","i","length","getCharType","code","targetValue","f","ev","target","value","mapColors","type","HighlightedText","locale","groupedByType","last","charCodeAt","push","Typography","className","map","chars","Tooltip","title","key","color","component","theme","createMuiTheme","typography","fontSize","useLocalStorage","createPersistedState","App","navigator","language","slice","includes","getDefaultLocale","setLocale_","React","useState","text","setText_","setLocale","useMemo","setText","localeDict","ThemeProvider","CssBaseline","Grid","container","item","md","xs","Container","maxWidth","Card","CardHeader","subheader","description","CardContent","TextField","label","enterSymbols","variant","multiline","fullWidth","onChange","Table","size","TableHead","TableRow","TableCell","char","TableBody","split","ch","RadioGroup","name","entry","FormControlLabel","localeTitle","control","Radio","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.968e8d05.chunk.js","sourcesContent":["import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography, { TypographyProps } from \"@material-ui/core/Typography\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React from \"react\";\nimport createPersistedState from \"use-persisted-state\";\nimport \"./App.css\";\nimport locales from \"./locale.json\";\n\ntype Locale = keyof typeof locales;\nconst localeList = Object.keys(locales) as Locale[];\n\nfunction getDefaultLocale() {\n  const locale: any = (navigator.language || \"\").slice(0, 2);\n  if (localeList.includes(locale)) {\n    return locale as Locale;\n  }\n  return \"ru\";\n}\n\nfunction ascOrEq(...numbers: number[]) {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    if (!(numbers[i] <= numbers[i + 1])) return false;\n  }\n  return true;\n}\nfunction getCharType(code: number) {\n  if (ascOrEq(49, code, 57)) {\n    return \"numeric\";\n  }\n  if (ascOrEq(65, code, 90)) {\n    return \"latin\";\n  }\n  if (ascOrEq(97, code, 122)) {\n    return \"latin\";\n  }\n  if (ascOrEq(1040, code, 1103)) {\n    return \"cyrillic\";\n  }\n  return \"other\";\n}\n\nconst targetValue = (f: (val: any) => void) => (ev: any) => {\n  return f(ev.target.value);\n};\n\nfunction mapColors(\n  type: ReturnType<typeof getCharType>,\n): TypographyProps[\"color\"] {\n  switch (type) {\n    case \"latin\":\n      return \"textPrimary\";\n    case \"cyrillic\":\n      return \"textSecondary\";\n    case \"numeric\":\n      return \"primary\";\n    default:\n      return \"error\";\n  }\n}\n\nconst HighlightedText: React.FC<{ value: string; locale: Locale }> = ({\n  value,\n  locale,\n}) => {\n  if (value.length < 1) return null;\n\n  const groupedByType = [value[0]];\n  for (let i = 1; i < value.length; i++) {\n    const last = groupedByType.length - 1;\n    if (\n      getCharType(value[i].charCodeAt(0)) ===\n      getCharType(groupedByType[last].charCodeAt(0))\n    ) {\n      groupedByType[last] = groupedByType[last] + value[i];\n    } else {\n      groupedByType.push(value[i]);\n    }\n  }\n  return (\n    <Typography className=\"highlighted-text\">\n      {groupedByType.map((chars, i) => {\n        const type = getCharType(chars.charCodeAt(0));\n        return (\n          <Tooltip title={locales[locale][type]} key={i}>\n            <Typography\n              color={mapColors(type)}\n              component=\"span\"\n              className=\"highlighted-text__entry\"\n            >\n              {chars}\n            </Typography>\n          </Tooltip>\n        );\n      })}\n    </Typography>\n  );\n};\n\nconst theme = createMuiTheme({ typography: { fontSize: 18 } });\nconst useLocalStorage = createPersistedState(\"locale\");\nconst App: React.FC = () => {\n  const [locale, setLocale_] = useLocalStorage(getDefaultLocale());\n  const [text, setText_] = React.useState(\"asdфыв123.\\n-\");\n  const setLocale = React.useMemo(() => targetValue(setLocale_), [setLocale_]);\n  const setText = React.useMemo(() => targetValue(setText_), [setText_]);\n\n  const localeDict = locales[locale];\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Grid container className=\"App\">\n        <Grid item md={2} />\n        <Grid item md={8} xs={12} className=\"middle-column\">\n          <Container maxWidth=\"sm\">\n            <Card className=\"main-card\">\n              <CardHeader\n                title={localeDict.title}\n                subheader={localeDict.description}\n              />\n              <CardContent>\n                <TextField\n                  label={localeDict.enterSymbols}\n                  variant=\"outlined\"\n                  multiline\n                  fullWidth\n                  onChange={setText}\n                  value={text}\n                  className=\"text-field\"\n                />\n                {!!text.length && (\n                  <>\n                    <HighlightedText value={text} locale={locale} />\n                    <hr></hr>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>{localeDict[\"#\"]}</TableCell>\n                          <TableCell>{localeDict.char}</TableCell>\n                          <TableCell>{localeDict.type}</TableCell>\n                          <Tooltip title=\"UTF-16 decimal\">\n                            <TableCell>{localeDict.code}*</TableCell>\n                          </Tooltip>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {text.split(\"\").map((ch, i) => {\n                          const code = ch.charCodeAt(0);\n                          return (\n                            <TableRow key={i}>\n                              <TableCell>{i + 1}</TableCell>\n                              <TableCell>{ch}</TableCell>\n                              <TableCell>\n                                <Typography\n                                  color={mapColors(getCharType(code))}\n                                  component=\"span\"\n                                >\n                                  {localeDict[getCharType(code)]}\n                                </Typography>\n                              </TableCell>\n                              <TableCell>{code}</TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </Container>\n        </Grid>\n        <Grid item>\n          <RadioGroup\n            name=\"locale\"\n            value={locale}\n            onChange={setLocale}\n            className=\"language-select\"\n          >\n            {localeList.map(entry => (\n              <FormControlLabel\n                key={entry}\n                label={locales[entry].localeTitle}\n                value={entry}\n                control={<Radio color=\"primary\" />}\n              />\n            ))}\n          </RadioGroup>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}