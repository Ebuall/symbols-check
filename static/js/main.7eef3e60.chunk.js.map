{"version":3,"sources":["utils.tsx","HighlightedText.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ascOrEq","i","length","getCharType","code","mapColors","type","HighlightedText","value","locale","groupedByType","last","charCodeAt","push","Typography","className","map","chars","Tooltip","title","locales","key","color","component","localeList","Object","keys","targetValue","f","ev","target","theme","createMuiTheme","typography","fontSize","useLocalStorage","createPersistedState","App","navigator","language","slice","includes","getDefaultLocale","setLocale_","React","useState","text","setText_","setLocale","useMemo","setText","localeDict","ThemeProvider","CssBaseline","Helmet","name","content","description","Grid","container","item","md","xs","Container","maxWidth","Card","CardHeader","subheader","CardContent","TextField","label","enterSymbols","variant","multiline","fullWidth","onChange","Table","size","TableHead","TableRow","TableCell","char","TableBody","split","ch","RadioGroup","entry","FormControlLabel","localeTitle","control","Radio","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eef3e60.chunk.js","sourcesContent":["import locales from \"./locale.json\";\r\nimport { TypographyProps } from \"@material-ui/core/Typography\";\r\n\r\nexport type Locale = keyof typeof locales;\r\nfunction ascOrEq(...numbers: number[]) {\r\n  for (let i = 0; i < numbers.length - 1; i++) {\r\n    if (!(numbers[i] <= numbers[i + 1])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getCharType(code: number) {\r\n  if (ascOrEq(49, code, 57)) {\r\n    return \"numeric\";\r\n  }\r\n  if (ascOrEq(65, code, 90)) {\r\n    return \"latin\";\r\n  }\r\n  if (ascOrEq(97, code, 122)) {\r\n    return \"latin\";\r\n  }\r\n  if (ascOrEq(1040, code, 1103)) {\r\n    return \"cyrillic\";\r\n  }\r\n  return \"other\";\r\n}\r\n\r\nexport function mapColors(\r\n  type: ReturnType<typeof getCharType>,\r\n): TypographyProps[\"color\"] {\r\n  switch (type) {\r\n    case \"latin\":\r\n      return \"textPrimary\";\r\n    case \"cyrillic\":\r\n      return \"textSecondary\";\r\n    case \"numeric\":\r\n      return \"primary\";\r\n    default:\r\n      return \"error\";\r\n  }\r\n}\r\n","import { Tooltip, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport locales from \"./locale.json\";\r\nimport { getCharType, Locale, mapColors } from \"./utils\";\r\n\r\nexport const HighlightedText: React.FC<{ value: string; locale: Locale }> = ({\r\n  value,\r\n  locale,\r\n}) => {\r\n  if (value.length < 1) return null;\r\n\r\n  const groupedByType = [value[0]];\r\n  for (let i = 1; i < value.length; i++) {\r\n    const last = groupedByType.length - 1;\r\n    if (\r\n      getCharType(value[i].charCodeAt(0)) ===\r\n      getCharType(groupedByType[last].charCodeAt(0))\r\n    ) {\r\n      groupedByType[last] = groupedByType[last] + value[i];\r\n    } else {\r\n      groupedByType.push(value[i]);\r\n    }\r\n  }\r\n  return (\r\n    <Typography className=\"highlighted-text\">\r\n      {groupedByType.map((chars, i) => {\r\n        const type = getCharType(chars.charCodeAt(0));\r\n        return (\r\n          <Tooltip title={locales[locale][type]} key={i}>\r\n            <Typography\r\n              color={mapColors(type)}\r\n              component=\"span\"\r\n              className=\"highlighted-text__entry\"\r\n            >\r\n              {chars}\r\n            </Typography>\r\n          </Tooltip>\r\n        );\r\n      })}\r\n    </Typography>\r\n  );\r\n};\r\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport createPersistedState from \"use-persisted-state\";\nimport \"./App.css\";\nimport { HighlightedText } from \"./HighlightedText\";\nimport locales from \"./locale.json\";\nimport { getCharType, Locale, mapColors } from \"./utils\";\n\nconst localeList = Object.keys(locales) as Locale[];\nfunction getDefaultLocale() {\n  const locale: any = (navigator.language || \"\").slice(0, 2);\n  if (localeList.includes(locale)) {\n    return locale as Locale;\n  }\n  return \"en\";\n}\n\nconst targetValue = (f: (val: any) => void) => (ev: any) => {\n  return f(ev.target.value);\n};\n\nconst theme = createMuiTheme({ typography: { fontSize: 18 } });\nconst useLocalStorage = createPersistedState(\"locale\");\n\nconst App: React.FC = () => {\n  const [locale, setLocale_] = useLocalStorage(getDefaultLocale());\n  const [text, setText_] = React.useState(\"\");\n  const setLocale = React.useMemo(() => targetValue(setLocale_), [setLocale_]);\n  const setText = React.useMemo(() => targetValue(setText_), [setText_]);\n\n  const localeDict = locales[locale];\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Helmet>\n        <title>{localeDict.title}</title>\n        <meta name=\"description\" content={localeDict.description} />\n      </Helmet>\n      <Grid container className=\"App\">\n        <Grid item md={2} />\n        <Grid item md={8} xs={12} className=\"middle-column\">\n          <Container maxWidth=\"sm\">\n            <Card className=\"main-card\">\n              <CardHeader\n                title={localeDict.title}\n                subheader={localeDict.description}\n              />\n              <CardContent>\n                <TextField\n                  label={localeDict.enterSymbols}\n                  variant=\"outlined\"\n                  multiline\n                  fullWidth\n                  onChange={setText}\n                  value={text}\n                  className=\"text-field\"\n                />\n                {!!text.length && (\n                  <>\n                    <HighlightedText value={text} locale={locale} />\n                    <hr></hr>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>{localeDict[\"#\"]}</TableCell>\n                          <TableCell>{localeDict.char}</TableCell>\n                          <TableCell>{localeDict.type}</TableCell>\n                          <Tooltip title=\"UTF-16 decimal\">\n                            <TableCell>{localeDict.code}*</TableCell>\n                          </Tooltip>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {text.split(\"\").map((ch, i) => {\n                          const code = ch.charCodeAt(0);\n                          return (\n                            <TableRow key={i}>\n                              <TableCell>{i + 1}</TableCell>\n                              <TableCell>{ch}</TableCell>\n                              <TableCell>\n                                <Typography\n                                  color={mapColors(getCharType(code))}\n                                  component=\"span\"\n                                >\n                                  {localeDict[getCharType(code)]}\n                                </Typography>\n                              </TableCell>\n                              <TableCell>{code}</TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n          </Container>\n        </Grid>\n        <Grid item>\n          <RadioGroup\n            name=\"locale\"\n            value={locale}\n            onChange={setLocale}\n            className=\"language-select\"\n          >\n            {localeList.map(entry => (\n              <FormControlLabel\n                key={entry}\n                label={locales[entry].localeTitle}\n                value={entry}\n                control={<Radio color=\"primary\" />}\n              />\n            ))}\n          </RadioGroup>\n        </Grid>\n      </Grid>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}